{
  // This is a collection of algorythms for data structures
  // @author: John Ericson Rodriguez <tbogard@streamoverlaypro.com>
  "Singly Linked List": {
    "description": "Singly linked lists is a data structure that contain nodes which have a data field as well as 'next' field which poinst to the next node in line of nodes.",
    "scope": "javascript,typescript",
    "prefix": "singlylinked",
    "body": [
      "/* Singly linked lists is a data structure that contain nodes which have a data ",
      "* field as well as 'next' field, which points to the next node in line of nodes. ",
      "* Operations that can be performed on  singly linked lists include insertion, ",
      "* deletion and traversal.",
      "* Insertion : O(1)",
      "* Removal   : Best O(1), worst : O(n)",
      "* Search    : O(n)",
      "* Access    : O(n)",
      "*/",
      "class Node {",
      "\tconstructor(val) {",
      "\t\tthis.value = val",
      "\t\tthis.next = null",
      "\t}",
      "}",
      "class SinglyLinkedList {",
      "\tconstructor() {",
      "\t\tthis.length = 0",
      "\t\tthis.head = null",
      "\t\tthis.tail = null",
      "\t}",
      "\tpush(val) {",
      "\t\tlet newNode = new Node(val)",
      "\t\tif (!this.head) {",
      "\t\t\tthis.head = newNode",
      "\t\t\tthis.tail = this.head;",
      "\t\t} else {",
      "\t\t\tthis.tail.next = newNode;",
      "\t\t\tthis.tail = newNode",
      "\t\t}",
      "\t\tthis.length += 1",
      "\t\treturn this",
      "\t}",
      "\ttraverse() {",
      "\t\tvar current = this.head",
      "\t\twhile (current) {",
      "\t\t\tconsole.log(current.value)",
      "\t\t\tcurrent = current.next",
      "\t\t}",
      "\t}",
      "\tpop() {",
      "\t\tif (!this.head)",
      "\t\t\treturn undefined",
      "\t\tvar current = this.head",
      "\t\tvar newTail = current",
      "\t\twhile (current.next) {",
      "\t\t\tif (current.next) {",
      "\t\t\t\tnewTail = current",
      "\t\t\t\tcurrent = current.next",
      "\t\t\t}",
      "\t\t}",
      "\t\tthis.tail = newTail",
      "\t\tthis.tail.next = null",
      "\t\tthis.length -= 1",
      "\t\tif (this.length === 0) {",
      "\t\t\tthis.head = null;",
      "\t\t\tthis.tail = null;",
      "\t\t}",
      "\t\treturn current;",
      "\t}",
      "\tshift() {",
      "\t\tif (!this.head)",
      "\t\t\treturn undefined",
      "\t\tvar current = this.head",
      "\t\tvar newHead = current.next",
      "\t\tthis.length -= 1",
      "\t\tthis.head = newHead",
      "\t\tcurrent.next = null",
      "\t\treturn current",
      "\t}",
      "\tunshift(val) {",
      "\t\tlet newNode = new Node(val)",
      "\t\tif (!this.head) {",
      "\t\t\tthis.head = newNode",
      "\t\t\tthis.tail = this.head",
      "\t\t} else {",
      "\t\t\tnewNode.next = this.head",
      "\t\t\tthis.head = newNode",
      "\t\t}",
      "\t\tthis.length += 1",
      "\t\treturn this",
      "\t}",
      "\tget(idx) {",
      "\t\tif (idx === undefined || typeof idx !== 'number' || idx < 0 || idx >= this.length)",
      "\t\t\treturn undefined",
      "\t\tlet counter = 0",
      "\t\tlet current = this.head",
      "\t\twhile (current && counter < idx) {",
      "\t\t\tcurrent = current.next",
      "\t\t\tcounter += 1",
      "\t\t}",
      "\t\treturn current",
      "\t}",
      "\tset(idx, value) {",
      "\t\tlet foundNode = this.get(idx)",
      "\t\tif (foundNode) {",
      "\t\t\tfoundNode.value = value",
      "\t\t\treturn true",
      "\t\t}",
      "\t\treturn false",
      "\t}",
      "\tinsert(idx, value) {",
      "\t\tif (idx === undefined || typeof idx !== 'number' || idx < 0 || idx > this.length)",
      "\t\t\treturn false",
      "\t\tif (idx === 0)",
      "\t\t\treturn Boolean(this.unshift(value))",
      "\t\tif (idx === this.length)",
      "\t\t\treturn Boolean(this.push(value))",
      "\t\tlet newNode = new Node(value)",
      "\t\tlet previous = this.get(idx - 1)",
      "\t\tlet next = previous.next",
      "\t\tnewNode.next = next",
      "\t\tprevious.next = newNode",
      "\t\tthis.length += 1",
      "\t\treturn true",
      "\t}",
      "\tremove(idx) {",
      "\t\tif (idx === undefined || typeof idx !== 'number' || idx < 0 || idx >= this.length)",
      "\t\t\treturn undefined",
      "\t\tif (idx === this.length - 1)",
      "\t\t\treturn this.pop()",
      "\t\tif (idx === 0)",
      "\t\t\treturn this.shift()",
      "\t\tlet previous = this.get(idx - 1)",
      "\t\tlet removed = previous.next",
      "\t\tprevious.next = removed.next",
      "\t\tthis.length -= 1",
      "\t\tremoved.next = null",
      "\t\treturn removed",
      "\t}",
      "\tprint() {",
      "\t\tvar arr = []",
      "\t\tvar current = this.head",
      "\t\twhile (current) {",
      "\t\t\tarr.push(current.value)",
      "\t\t\tcurrent = current.next",
      "\t\t}",
      "\t\treturn arr",
      "\t}",
      "\treverse() { //this one is very popular in interviews, ensure to study how it operates!!!",
      "\t\tvar node = this.head",
      "\t\tthis.head = this.tail",
      "\t\tthis.tail = node",
      "\t\tlet counter = 0",
      "\t\tlet previous = null",
      "\t\tlet next;",
      "\t\twhile (counter < this.length) {",
      "\t\t\tnext = node.next;",
      "\t\t\tnode.next = previous",
      "\t\t\tprevious = node;",
      "\t\t\tnode = next;",
      "\t\t\tcounter += 1",
      "\t\t}",
      "\t\treturn this",
      "\t}",
      "}",
      "var list = new SinglyLinkedList();",
      "list.push(1)",
      "list.push(2)",
      "list.push(3)",
      "list.push(4)",
      "list.push(5)",
      "list.push(6)",
      "list.print()",
      "$2"
    ]
  },
  "Doubly Linked List": {
    "description": "Doubly linked list is a type of linked list in which each node apart from storing its data has two links. The first link points to the previous node in the list and the second link points to the next node in the list.",
    "scope": "javascript,typescript",
    "prefix": "doublyLinkedList",
    "body": [
      "/* Doubly linked list is a type of linked list in which each node apart from",
      "* storing its data has two links. The first link points to the previous node in",
      "* the list and the second link points to the next node in the list. ",
      "* Insertion : O(1)",
      "* Removal   : O(1)",
      "* Search    : O(n)",
      "* Access    : O(n)",
      "*/",
      "class Node {",
      "\tconstructor(val) {",
      "\t\tthis.val = val",
      "\t\tthis.next = null",
      "\t\tthis.prev = null;",
      "\t}",
      "}",
      "",
      "class DoublyLinkedList {",
      "\tconstructor() {",
      "\t\tthis.head = null",
      "\t\tthis.tail = null",
      "\t\tthis.length = 0",
      "\t}",
      "\tpush(val) {",
      "\t\tlet newNode = new Node(val)",
      "\t\tif (!this.head) {",
      "\t\t\tthis.head = newNode",
      "\t\t\tthis.tail = newNode",
      "\t\t} else {",
      "\t\t\tnewNode.prev = this.tail;",
      "\t\t\tnewNode.next = null;",
      "\t\t\tthis.tail.next = newNode",
      "\t\t\tthis.tail = newNode",
      "\t\t}",
      "\t\tthis.length += 1",
      "\t\treturn this",
      "\t}",
      "",
      "\tpop() {",
      "\t\tif (!this.head) return undefined",
      "\t\tvar poppedNode = this.tail",
      "\t\tif (this.length === 1) {",
      "\t\t\tthis.head = null",
      "\t\t\tthis.tail = null",
      "\t\t} else {",
      "\t\t\tthis.tail = poppedNode.prev",
      "\t\t\tthis.tail.next = null",
      "\t\t\tpoppedNode.prev = null",
      "\t\t}",
      "\t\tthis.length -= 1",
      "\t\treturn poppedNode",
      "\t}",
      "",
      "\tshift() {",
      "\t\tif (!this.head) return undefined",
      "\t\tlet oldHead = this.head;",
      "\t\tlet newHead = this.head.next;",
      "\t\tif (this.length === 1) {",
      "\t\t\tthis.head = null",
      "\t\t\tthis.tail = null",
      "\t\t} else {",
      "\t\t\tnewHead.prev = null;",
      "\t\t\tthis.head = newHead;",
      "\t\t\tthis.head.prev = null;",
      "\t\t\toldHead.prev = null;",
      "\t\t\toldHead.next = null;",
      "\t\t}",
      "\t\tthis.length -= 1",
      "\t\treturn oldHead",
      "\t}",
      "",
      "\tunshift(val) {",
      "\t\tlet newNode = new Node(val)",
      "\t\tif (!this.head) {",
      "\t\t\tthis.head = newNode",
      "\t\t\tthis.tail = newNode",
      "\t\t} else {",
      "\t\t\tthis.head.prev = newNode",
      "\t\t\tnewNode.next = this.head",
      "\t\t\tthis.head = newNode",
      "\t\t}",
      "\t\tthis.length += 1",
      "\t\treturn this",
      "\t}",
      "",
      "\tget(idx) {",
      "\t\tif (idx < 0 || idx > this.length - 1) return undefined",
      "\t\tlet middleLength = Math.floor(this.length / 2)",
      "\t\tlet current = null",
      "\t\tif (idx <= middleLength) {",
      "\t\t\tlet counter = 0",
      "\t\t\tcurrent = this.head",
      "\t\t\twhile (counter !== idx) {",
      "\t\t\t\tcurrent = current.next",
      "\t\t\t\tcounter += 1",
      "\t\t\t}",
      "\t\t} else {",
      "\t\t\tlet counter = this.length - 1",
      "\t\t\tcurrent = this.tail",
      "\t\t\twhile (counter !== idx) {",
      "\t\t\t\tcurrent = current.prev",
      "\t\t\t\tcounter -= 1",
      "\t\t\t}",
      "\t\t}",
      "\t\treturn current;",
      "\t}",
      "",
      "\tset(idx, val) {",
      "\t\tlet node = this.get(idx)",
      "\t\tif (node !== null) {",
      "\t\t\tnode.val = val",
      "\t\t\treturn true",
      "\t\t}",
      "\t\treturn false;",
      "\t}",
      "",
      "\tinsert(idx, val) {",
      "\t\tif (idx < 0 || idx > this.length) return undefined",
      "\t\tif (idx === 0) return Boolean(this.unshift(val))",
      "\t\tif (idx === length) return Boolean(this.push(val))",
      "\t\tlet newNode = new Node(val)",
      "\t\tlet beforeNode = this.get(idx - 1)",
      "\t\tlet afterNode = beforeNode.next",
      "\t\tbeforeNode.next = newNode",
      "\t\tnewNode.prev = beforeNode",
      "\t\tnewNode.next = afterNode",
      "\t\tafterNode.prev = newNode",
      "\t\tthis.length += 1",
      "\t\treturn true",
      "\t}",
      "",
      "\tremove(idx) {",
      "\t\tif (idx < 0 || idx > this.length) return undefined",
      "\t\tif (idx === 0) return this.shift()",
      "\t\tif (idx === this.length - 1) return this.pop()",
      "\t\tlet nodeToDelete = this.get(idx)",
      "\t\tlet previousNode = nodeToDelete.prev",
      "\t\tlet nextNode = nodeToDelete.next",
      "\t\tpreviousNode.next = nextNode",
      "\t\tnextNode.prev = previousNode",
      "\t\tnodeToDelete.next = null",
      "\t\tnodeToDelete.prev = null",
      "\t\tthis.length -= 1",
      "\t\treturn nodeToDelete",
      "\t}",
      "\tprint() {",
      "\t\tvar arr = []",
      "\t\tvar current = this.head",
      "\t\twhile (current) {",
      "\t\t\tarr.push(current.value)",
      "\t\t\tcurrent = current.next",
      "\t\t}",
      "\t\treturn arr",
      "\t}",
      "",
      "\treverse() {",
      "\t\tvar node = this.head",
      "\t\tthis.head = this.tail",
      "\t\tthis.tail = node",
      "\t\tvar next = null",
      "\t\tvar prev = null",
      "\t\tvar counter = this.length",
      "\t\twhile (counter > 0) {",
      "\t\t\tnext = node.next",
      "\t\t\tnode.next = prev",
      "\t\t\tprev = node",
      "\t\t\tprev.prev = next",
      "\t\t\tnode = next",
      "\t\t\tcounter -= 1",
      "\t\t}",
      "\t\treturn this",
      "\t}",
      "}",
      "var $1 = new DoublyLinkedList();",
      "$1.push(1)",
      "$1.push(2)",
      "$1.push(3)",
      "$1.push(4)",
      "$1.push(5)",
      "$1.push(6)",
      "$1.print()",
      "$2"
    ]
  },
  "Stack": {
    "description": "Stack is a data structure where the last node of the structure is the first one to be taken out (LIFO) ",
    "scope": "javascript,typescript",
    "prefix": "stackStructure",
    "body": [
      "/* Stack is a data structure where the last node of the structure is the first one",
      "* to be taken out (LIFO). Think about it as a stack of books where you pile them up: the first book on the bottom of the stack ",
      "* will be taken out LAST. In this example, we will be using a singly linked list, so we don't worry about re-indexing an array",
      "* in large assets of data. Here we do not need indexes. When using a singly list, we could remove from the beggining",
      "* of the list as the top of the stack",
      "* Insertion : O(1)",
      "* Removal   : O(1)",
      "* Search    : O(n)",
      "* Access    : O(n)",
      "*/",
      "class Node {",
      "\tconstructor(val) {",
      "\t\tthis.val = val",
      "\t\tthis.next = null",
      "\t}",
      "}",
      "",
      "class Stack {",
      "\tconstructor() {",
      "\t\tthis.first = null",
      "\t\tthis.last = null",
      "\t\tthis.size = 0",
      "\t}",
      "",
      "\tpop() {",
      "\t\tif (!this.first) return null",
      "\t\tvar tmp = this.first",
      "\t\tif (this.first === this.last) {",
      "\t\t\tthis.last = null",
      "\t\t}",
      "\t\tthis.first = this.first.next",
      "\t\ttmp.next = null",
      "\t\tthis.size -= 1",
      "\t\treturn tmp",
      "\t}",
      "",
      "\tpush(val) {",
      "\t\tvar newNode = new Node(val)",
      "\t\tif (!this.first) {",
      "\t\t\tthis.first = newNode",
      "\t\t\tthis.last = newNode",
      "\t\t} else {",
      "\t\t\tvar tmp = this.first;",
      "\t\t\tthis.first = newNode",
      "\t\t\tthis.first.next = tmp",
      "\t\t}",
      "\t\tthis.size += 1",
      "\t\treturn this.size",
      "}",
      "",
      "\tprint() {",
      "\t\tvar current = this.first;",
      "\t\twhile (current) {",
      "\t\t\tconsole.log(current.val)",
      "\t\t\tcurrent = current.next",
      "\t\t}",
      "\t}",
      "}",
      "",
      "var $1 = new Stack();"
    ]
  },
  "Queue": {
    "description": "Queue is a data structure where the first node of the structure is the first one to be taken out (FIFO)",
    "scope": "javascript,typescript",
    "prefix": "queueStructure",
    "body": [
      "/* Queue is a data structure where the first node of the structure is the first one",
      "* to be taken out (FIFO). Think about it as line, or a printing queue",
      "* Insertion : O(1)",
      "* Removal   : O(1)",
      "* Search    : O(n)",
      "* Access    : O(n)",
      "*/",
      "class Node {",
      "\tconstructor(val) {",
      "\t\tthis.val = val",
      "\t\tthis.next = null",
      "\t}",
      "}",
      "",
      "class Queue {",
      "\tconstructor() {",
      "\t\tthis.first = null",
      "\t\tthis.last = null",
      "\t\tthis.size = 0",
      "\t}",
      "",
      "\tenqueue(val) {",
      "\t\tvar newNode = new Node(val)",
      "\t\tif (!this.first) {",
      "\t\t\tthis.first = newNode",
      "\t\t\tthis.last = newNode",
      "\t\t} else {",
      "\t\t\tthis.last.next = newNode;",
      "\t\t\tthis.last = newNode",
      "\t\t}",
      "\t\tthis.size += 1",
      "\t\treturn this.size",
      "\t}",
      "",
      "\tdequeue() {",
      "\t\tif (!this.first) return null",
      "\t\tvar tmp = this.first",
      "\t\tif (this.first === this.last) {",
      "\t\t\tthis.last = null",
      "\t\t}",
      "\t\tthis.first = tmp.next;",
      "\t\ttmp.next - null",
      "\t\tthis.size -= 1",
      "\t\treturn tmp",
      "\t}",
      "",
      "\tprint() {",
      "\t\tvar current = this.first;",
      "\t\twhile (current) {",
      "\t\t\tconsole.log(current.val)",
      "\t\t\tcurrent = current.next",
      "\t\t}",
      "\t}",
      "}",
      "",
      "var $1 = new Queue()"
    ]
  }
}
